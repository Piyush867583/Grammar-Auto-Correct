# -*- coding: utf-8 -*-
"""Grammar Auto Correct.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aKYLv_9CKv5jF3_ES8P3os5l8GlbZxdG
"""

# !pip install transformers -q
from transformers import AutoTokenizer, T5ForConditionalGeneration

tokenizer = AutoTokenizer.from_pretrained("grammarly/coedit-large")
model = T5ForConditionalGeneration.from_pretrained("grammarly/coedit-large")

import spacy
nlp = spacy.load('en_core_web_sm')

def generate_correct_grammar_sentence(input_text):
  text = f'Fix grammatical errors in this sentence: {input_text}'
  input_ids = tokenizer(text,return_tensors="pt").input_ids
  outputs = model.generate(input_ids,max_length=256)
  edited_text = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return edited_text

def paraphrase_text(input_text):
  text = f'Paraphrase this: {input_text}'
  input_ids = tokenizer(text,return_tensors="pt").input_ids
  outputs = model.generate(input_ids,max_length=256)
  paraphrased_text = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return paraphrased_text

def improve_grammar(input_text):
  text = f'Improve the grammaticality:{input_text}'
  input_ids = tokenizer(text,return_tensors='pt').input_ids
  outputs = model.generate(input_ids,max_length=256)
  improved_grammar = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return improved_grammar

def simplification(input_text):
  text = f'Simplify this text:{input_text}'
  input_ids = tokenizer(text,return_tensors='pt').input_ids
  outputs = model.generate(input_ids,max_length = 256)
  simplified_grammar = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return simplified_grammar

def cohesive(input_text):
  text = f'Fix coherence in this text:{input_text}'
  input_ids = tokenizer(text,return_tensors='pt').input_ids
  outputs = model.generate(input_ids,max_length = 256)
  cohesive_grammar = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return cohesive_grammar


def Neutralize(input_text):
  text = f'Make this text more neutral:{input_text}'
  input_ids = tokenizer(text,return_tensors='pt').input_ids
  outputs = model.generate(input_ids,max_length = 256)
  Neutralized_grammar = tokenizer.decode(outputs[0],skip_special_tokens=True)
  return Neutralized_grammar

# ! pip install gtts -q
from gtts import gTTS
import os

def correct_paragraph(paragraph):
  wrong_english =[]
  para = paragraph
  doc = nlp(para)
  for sentence in doc.sents:
    wrong_english.append(sentence)
  corrected_english = []
  paraphrased_text = []
  for sentence in wrong_english:
    corrected_english.append(generate_correct_grammar_sentence(str(sentence)))
  corrected_paragraph  = ' '.join(corrected_english)
  for sentence in corrected_english:
    paraphrased_sentence = paraphrase_text(sentence)
    paraphrased_text.append(paraphrased_sentence)
  paraphrased_paragragh = ' '.join(paraphrased_text)
  tts_c = gTTS(corrected_paragraph)
  corrected_path = "corrected.mp3"
  tts_c.save(corrected_path)
  tts_p=gTTS(paraphrased_paragragh)
  paraphrased_path='paraphrased.mp3'
  tts_p.save(paraphrased_path)
  return corrected_paragraph,paraphrased_paragragh,corrected_path,paraphrased_path

def Neutralize_paragraph(paragraph):
  english = []
  para = paragraph
  doc = nlp(para)
  for sentence in doc.sents:
    english.append(sentence)
  neutralized_english = []
  for sentence in english:
    neutralized_english.append(Neutralize(str(sentence)))
  neutralized_paragraph = ' '.join(neutralized_english)
  tts_n=gTTS(neutralized_paragraph)
  neutralized_path='neutralized.mp3'
  tts_n.save(neutralized_path)
  return neutralized_paragraph,neutralized_path


def Cohesive_paragraph(paragraph):
  english = []
  para = paragraph
  doc = nlp(para)
  for sentence in doc.sents:
    english.append(sentence)
  cohesive_english = []
  for sentence in english:
    cohesive_english.append(cohesive(str(sentence)))
  cohesive_paragraph = ' '.join(cohesive_english)
  tts_c=gTTS(cohesive_paragraph)
  cohesive_path='cohesive.mp3'
  tts_c.save(cohesive_path)
  return cohesive_paragraph,cohesive_path

def Simplified_paragraph(paragraph):
  english = []
  para = paragraph
  doc = nlp(para)
  for sentence in doc.sents:
    english.append(sentence)
  simplified_english = []
  for sentence in english:
    simplified_english.append(simplification(str(sentence)))
  simplified_paragraph = ' '.join(simplified_english)
  tts_s=gTTS(simplified_paragraph)
  simplified_path='simplified.mp3'
  tts_s.save(simplified_path)
  return simplified_paragraph,simplified_path

# !pip install gradio -q

import gradio as gr

def process_paragraph(paragraph, process_type):
    corrected_paragraph, paraphrased_paragraph,corrected_audio,paraphrased_audio = correct_paragraph(paragraph)
    if process_type == "Neutralize":
        neutralized_paragraph,neutralized_audio = Neutralize_paragraph(corrected_paragraph)
        return f"Corrected Paragraph:\n{corrected_paragraph}\n\nParaphrased Paragraph:\n{paraphrased_paragraph}\n\nNeutralized Paragraph:\n{neutralized_paragraph}",corrected_audio,paraphrased_audio,neutralized_audio
    elif process_type == "Cohesive":
        cohesive_paragraph,cohesive_audio = Cohesive_paragraph(corrected_paragraph)
        return f"Corrected Paragraph:\n{corrected_paragraph}\n\nParaphrased Paragraph:\n{paraphrased_paragraph}\n\nCohesive Paragraph:\n{cohesive_paragraph}",corrected_audio,paraphrased_audio,cohesive_audio
    elif process_type == "Simplify":
        simplified_paragraph,simplified_audio = Simplified_paragraph(corrected_paragraph)
        return f"Corrected Paragraph:\n{corrected_paragraph}\n\nParaphrased Paragraph:\n{paraphrased_paragraph}\n\nSimplified Paragraph:\n{simplified_paragraph}",corrected_audio,paraphrased_audio,simplified_audio

print(process_paragraph("Injury, bad luck and inconsistency prevented him from ever winning the series. He was certainly good enough.","Cohesive"))

js= """
function createGradioAnimation() {
    var container = document.createElement('div');
    container.id = 'gradio-animation';
    container.style.fontSize = '2em';
    container.style.fontWeight = 'bold';
    container.style.textAlign = 'center';
    container.style.marginBottom = '20px';
    container.style.font-family = 'Bariol';


    var text = 'Welcome to Gradio!';
    for (var i = 0; i < text.length; i++) {
        (function(i){
            setTimeout(function(){
                var letter = document.createElement('span');
                letter.style.opacity = '0';
                letter.style.transition = 'opacity 0.5s';
                letter.innerText = text[i];

                container.appendChild(letter);

                setTimeout(function() {
                    letter.style.opacity = '1';
                }, 50);
            }, i * 250);
        })(i);
    }

    var gradioContainer = document.querySelector('.gradio-container');
    gradioContainer.insertBefore(container, gradioContainer.firstChild);

    return 'Animation created';
}

function createGradioAnimation()
"""

js=""""
const element = document.querySelector('.gradio-container');
element.style.background-color: red;
"""

interface=gr.Interface(process_paragraph,
                       inputs=[gr.Textbox(max_lines=20,placeholder="Enter your paragraph here....",label="Input Text"),
                               gr.Dropdown([ "Neutralize", "Cohesive", "Simplify"],label="Select Processing Type",info="Select what you want to do with your text..."
                               )],

                       outputs=["text",
                                gr.Audio(label='corrected paragraph',interactive=False,waveform_options=False,elem_classes="custom-audio"),
                                gr.Audio(label='prephrased paragraph',interactive=False,waveform_options=False,elem_classes="custom-audio"),
                                gr.Audio(label='paragraph',interactive=False,waveform_options=False,elem_classes="custom-audio")],

                       theme="glass",

                       examples=[["Guy Leech is still a celebrity today. Guy Leech regularly appears on television as an advocate for health and fitness.","Cohesive"],
                                 ["There was a girl standing there, staring into the room.","Simplify"],
                                 ["""chloroform "the molecular lifesaver" an article at oxford university providing interesting facts about chloroform.""","Neutralize"],
                                 ["melina is currently dating john cena, known as johnny nitro.","Neutralize"],
                                 ["Injury, bad luck and inconsistency prevented him from ever winning the series. He was certainly good enough.","Cohesive"],
                                 ["That's about 1.9 trillion by today's standards.","Simplify"]],
                       title='Paragraph Process',

                       description="""How to Use:

                                  <font size="4">1</font>.Enter Your Paragraph: Type or paste the paragraph you want to process into the text box provided.,
                                 <font size="4">2</font>. Select Processing Type: Choose the type of processing you want to apply from the dropdown menu. The options include:
                                      (a)<U>Correct and Paraphrase</U>: Automatically corrects grammatical errors in your paragraph and provides a paraphrased version.
                                      (b)<U>Neutralize</U>: Adjusts the tone of your paragraph to be more neutral.
                                      (c)<U>Cohesive</U>: Enhances the coherence of your paragraph, making it flow better.
                                      (d)<U>Simplify</U>: Simplifies complex sentences for better readability and understanding.,
                                  <font size="4">3</font>.Process and View Results: Click the submit button to process your paragraph. The results will be displayed, showing the refined version of your text.""",
                       )


# interface.launch(inbrowser=True,auth=("username","password"),auth_message="Enter the <strong>Login</strong> details:")
interface.launch(debug=True)

